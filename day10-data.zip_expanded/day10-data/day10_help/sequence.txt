Revise  I/O(Input / Output) (refer to readmes from day9 help)
Serialization n de-serialization
Enter Threads


1. Java I/O revision : 

Java supports handling of different devices
eg : Keyboard(System.in), Console(System.out), File(text file n bin files) ,networking Sockets(end point of communication in distributed computing) , Pipes(virtual data pipe existing between multiple threads)
n many more...

I/O Streams
Stream : represents data transfer to/from Java app n device
Input stream : Reads data from device --> Java App
Output stream : Writes data from Java App --> device

The packages used for handling devices in Java : java.io, java.nio

java.io : In case of any errs in read/write operation ---JVM throws : java.io.IOException
(checked exc)

read/write methods :blocking or non blocking ? : Represnts blocking API
Meaning : It causes the blocking of invoker thread , until read/write operation is complete.

Inheritance hierarchy of classes in java.io
refer : to a diagram

Java 8 Streams(Functional streams ) : represents pipeline of big data ops(aggregate ops) to be perfromed on seq. of elems derived from : arrays / collection /file....
eg : java.util.stream.Stream<T>,IntStream,LongStream,DoubleStream
eg of higher order funs : intermediate ops --filter,map,mapToDouble,sorted,flatMap
forEach,collect,count,sum,average : terminal ops
eg : empList.stream().filter(e.getDept() == dept) .count() --> no of emps from a specific dept

I/O Stream -- represent data transfer (bytes/chars) from/to java app to/from device(eg : file , pipe,socket,memory,console...)
For  reading data from data src into java  app : input stream
For  writing data to data sink from java  app :output stream

java.io --2 types of strms
1. Binary strms
2. char strms

Name 4 abstract super classes in I/O hierarchy :  InputStream,OutputStream,Reader,Writer

Node streams : device handling strms
File Handling strms : FIS,FOS,FR,FW
Buffering strms : BIS,BOS,BR,BW(PW)




2. Enter Binary file handling streams 
2.1 Node streams -- FileInputStream , FOS
2.2 Buffering of bin data : BIS , BOS

2.3 Integration of Collection + I/O
Store n later restore the products from bin file

Steps
1. Get populated list of products --store these details in a bin file , using bin streams

1.1 Core classes  : Product , Category 

1.2 custom exc

1.3 ShopUtils --collection utils --
populate list
populate map


1.4 IOUtils -- i/f
add a static method --to store the  products in a bin file      


1.5 Tester : StoreProductDetails --
Accept name of file from user n call our own API


java.io.DataOutputStream : class imple DataOutput ....
It's conversion stream class , for prim types --> binary n strings--> bin
Ctor : DataOutputStream(OutputStream out)
Chain of I/O resources for writing details in pure bin format

Java App ---> DOS ---> BOS --> FOS (bin file)
try(DOS out=new DOS(new BOS(new FOS(fileName)))
{
....
}
Methods of DOS
public void writeInt(int i) throws IOException
public void writeShort(short i) throws IOException
writeLong,writeFloat,writeDouble....
+ 
public void writeUTF(String s) throws IOException


try(DOS out=new DOS(new BOS(new FOS(fileName)))
{
  map.values().stream().forEach(p -> {
   //prog has to call the API for  individual data member(eg : product id , desc.date... -->bin
  });
}
--> as a result bin file wil be created.

To restrore the products from bin file --> Map

Java App <--- DIS <----BIS <--- FIS (bin file) 

java.io.DataInputStream : class that represents a converiosn stream
Ctor : DataInputStream(InputStream in)
Methods 
public int readInt() throws IOException
public double readDouble() throws IOException
public float readFloat() throws IOException
public char readChar() throws IOException
public String readUTF() throws IOException


Object streams
1. ObjectOutputStream : class that implements : DataOutput,ObjectOutput i/f
Performs serialization(conversion stream class)
Ctor : ObjectOutputStream(OutputStream out)
Methods :
public void writeInt(int i) throws IOException
public void writeShort(short i) throws IOException
writeLong,writeFloat,writeDouble....
+ 
public void writeUTF(String s) throws IOException
+ public void writeObject(Object o) throws IOException

Important Fact :
When JVM performs the ser (writeObject) or later performs de-ser. (readObject)
JVM checks the serlializability of the entire obejct graph.
If JVM comes across , any non-ser object , JVM aborts ser/de-ser throwing the excpetion : java.io.NotSerializableException

How ?
java.io.Serializable : marker i/f (no fields or methods)
If the objects (class) have imple this i/f , JVM allows the ser/de-ser.
java.io.Serializable => Run time marker  , meant for JVM

For de-ser.
Class : java.io.ObjectInputStream imple . DataInput,ObjectInput
Ctor : ObjectInputStream(InputStream in)
Methods
public int readInt() throws IOException
.....
+
public Object readObject() throws ClassNotFoundException, InvalidClassException,IOException

What is SerialVersionUID ?
It's a long static no. computed by JVM , using a tool : serialver (from JDK) , during serialization , for every class.
It's stored in serialized bin stream.

During de-ser
1. class loading 
2. during class loading , de-ser(JVM : in.readObject)  will recompute the serial ver UID , based upon the classes available in the run time class path.
Tries to match locally computed UID with the incoming UID , from the bin stream.
In case of a mismatch , JVM throws : InvalidClassException n aborts de-ser.
3. In case of no problems , continues to de-ser.






